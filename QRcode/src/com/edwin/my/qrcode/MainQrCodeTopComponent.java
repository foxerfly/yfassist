/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.edwin.my.qrcode;

import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.swing.ImageIcon;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.edwin.my.qrcode//MainQrCode//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "MainQrCodeTopComponent",
        iconBase = "com/edwin/my/qrcode/camera.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "rightSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "com.edwin.my.qrcode.MainQrCodeTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MainQrCodeAction",
        preferredID = "MainQrCodeTopComponent")
@Messages({
    "CTL_MainQrCodeAction=MainQrCode",
    "CTL_MainQrCodeTopComponent=MainQrCode Window",
    "HINT_MainQrCodeTopComponent=This is a MainQrCode window"
})
public final class MainQrCodeTopComponent extends TopComponent {

    public MainQrCodeTopComponent() {
        initComponents();
        setName(Bundle.CTL_MainQrCodeTopComponent());
        setToolTipText(Bundle.HINT_MainQrCodeTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputQRcode = new javax.swing.JTextField();
        qrCoderImage = new javax.swing.JPanel();
        labelImage = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MainQrCodeTopComponent.class, "MainQrCodeTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(MainQrCodeTopComponent.class, "MainQrCodeTopComponent.jLabel2.text")); // NOI18N

        inputQRcode.setText(org.openide.util.NbBundle.getMessage(MainQrCodeTopComponent.class, "MainQrCodeTopComponent.inputQRcode.text")); // NOI18N
        inputQRcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputQRcodeKeyReleased(evt);
            }
        });

        qrCoderImage.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        qrCoderImage.setMinimumSize(new java.awt.Dimension(197, 264));
        qrCoderImage.setPreferredSize(new java.awt.Dimension(197, 264));

        org.openide.awt.Mnemonics.setLocalizedText(labelImage, org.openide.util.NbBundle.getMessage(MainQrCodeTopComponent.class, "MainQrCodeTopComponent.labelImage.text")); // NOI18N

        javax.swing.GroupLayout qrCoderImageLayout = new javax.swing.GroupLayout(qrCoderImage);
        qrCoderImage.setLayout(qrCoderImageLayout);
        qrCoderImageLayout.setHorizontalGroup(
            qrCoderImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        qrCoderImageLayout.setVerticalGroup(
            qrCoderImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelImage, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(qrCoderImage, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputQRcode, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputQRcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(qrCoderImage, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void inputQRcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputQRcodeKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                generaterQrcodeImage(inputQRcode.getText().trim());
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        // labelImage.repaint();
//        qrCoderImage.updateUI();
    }//GEN-LAST:event_inputQRcodeKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputQRcode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel labelImage;
    private javax.swing.JPanel qrCoderImage;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void generaterQrcodeImage(String qrContent) throws IOException {

        String imagePath = "D:\\qr\\qr0001.png";
        BufferedImage bf = null;
        TwoDimensionCode qr = new TwoDimensionCode();
        bf = qr.encoderQRCodeBufferedImages(qrContent, imagePath,
                "PNG", 7);
        //qrCoderImage.imageUpdate(bf, JPanel.WIDTH, qrCoderImage.getX(), qrCoderImage.getY(), qrCoderImage.getWidth(), qrCoderImage.getHeight());
//        boolean b = false;
//        Image i
//        b = labelImage.imageUpdate(bf, JLabel.CENTER, 100, 100, 100, 100);


        ImageIcon ic = new ImageIcon(bf);
        labelImage.setIcon(ic);

//        qrCoderImage.add(new JLabel(new ImageIcon(bf)));

//        qrCoderImage.add(new JLabel(new ImageIcon(bf)));

//        if (b) {
//            JOptionPane.showConfirmDialog(null,
//                    "true", "choose one", JOptionPane.YES_NO_OPTION);
//        } else {
//            JOptionPane.showConfirmDialog(null,
//                    "false", "choose one", JOptionPane.YES_NO_OPTION);
//        }
    }
}
