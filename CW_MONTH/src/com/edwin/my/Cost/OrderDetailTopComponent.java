/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.edwin.my.Cost;

import SqlInterface.QueryErp;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ProxyLookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.edwin.my.Cost//OrderDetail//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "OrderDetailTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "com.edwin.my.Cost.OrderDetailTopComponent")
@ActionReference(path = "Menu/Window/财务" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_OrderDetailAction",
        preferredID = "OrderDetailTopComponent")
@Messages({
    "CTL_OrderDetailAction=OrderDetail",
    "CTL_OrderDetailTopComponent=OrderDetail Window",
    "HINT_OrderDetailTopComponent=This is a OrderDetail window"
})
public final class OrderDetailTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener,
        PropertyChangeListener {

    public OrderDetailTopComponent() {
        initComponents();
        setName(Bundle.CTL_OrderDetailTopComponent());
        setToolTipText(Bundle.HINT_OrderDetailTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, true);
        this.
                //  initTree();
                //        ActionMap map = this.getActionMap();
                //        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(em));
                //        map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(em));
                //        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(em));
                //        map.put("delete", ExplorerUtils.actionDelete(em, true)); // or false
                associateLookup(new ProxyLookup(ExplorerUtils.createLookup(em, getActionMap()), new AbstractLookup(content)));  //getActionMap() replaced by map
        em.addPropertyChangeListener(this);

//        beanTreeView1.addMouseListener(this);
//        beanTreeView1.addPropertyChangeListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        beanTreeView1 = new org.openide.explorer.view.BeanTreeView();

        setPreferredSize(new java.awt.Dimension(304, 437));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(beanTreeView1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(beanTreeView1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void initTree() {

        OrderDetailNode od = new OrderDetailNode(ROOT);
        od.setIconBaseWithExtension("ICONS/methodPackage.png");
        em.setRootContext(od);
        em.getRootContext().setDisplayName(ROOT);

    }
    private String ROOT = "";
    private Lookup.Result<MaterialNO> result = null;
    private InstanceContent content = new InstanceContent();
    private ExplorerManager em = new ExplorerManager();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView beanTreeView1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        result = Utilities.actionsGlobalContext().lookupResult(MaterialNO.class);
        result.addLookupListener(this);

//        ExplorerUtils.activateActions(em, true);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
        result.removeLookupListener(this);
        super.close();

//        ExplorerUtils.activateActions(em, false);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void resultChanged(LookupEvent ev) {

        Collection<? extends MaterialNO> ph = result.allInstances();
        if (!ph.isEmpty()) {

            ROOT = ph.iterator().next().getPh().toString().trim();
//            System.out.println(ROOT);
            OrderDetailNode od = new OrderDetailNode(ROOT);
            od.setIconBaseWithExtension("ICONS/methodPackage.png");
            em.setRootContext(od);
            em.getRootContext().setDisplayName(ROOT);
            beanTreeView1.expandAll();

        }
//        System.out.println("ddd");
    }

    public MaterialNODetail getSelectedph(String ph) throws ClassNotFoundException, SQLException {

        ResultSet rs;
        String sql = "SELECT MB001,MB002,MB003,MB110,MB004,MB025 FROM INVMB  WHERE MB001=?";
        QueryErp qr = Lookup.getDefault().lookup(QueryErp.class);
        rs = qr.rsErp(sql, ph);
        ArrayList<String> phList = new ArrayList<String>();
        while (rs.next()) {
            phList.add(rs.getString("MB001"));
            phList.add(rs.getString("MB002"));
            phList.add(rs.getString("MB003"));
            phList.add(rs.getString("MB110"));
            phList.add(rs.getString("MB004"));
            phList.add(rs.getString("MB025"));

        }
        MaterialNODetail mo = new MaterialNODetail(phList);
        return mo;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {

//        System.out.println(evt.getPropertyName().toString());
        Node[] noes = em.getSelectedNodes();
        if (noes.length > 0) {
            try {
//                System.out.println(noes.length);
                MaterialNODetail mo = null;
                Node no = noes[0];
                mo = getSelectedph(no.getDisplayName());
//                System.out.println(no.getDisplayName());
                content.set(Collections.singleton(mo), null);
//                System.out.println("------------------");
            } catch (ClassNotFoundException ex) {
                Exceptions.printStackTrace(ex);
            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }

}
