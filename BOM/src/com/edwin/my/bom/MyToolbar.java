/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.edwin.my.bom;

import java.awt.event.ActionListener;
import java.sql.SQLException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.openide.awt.NotificationDisplayer;
import org.openide.util.Exceptions;

/**
 *
 * @author EDWIN
 */
public class MyToolbar extends javax.swing.JPanel {

    /**
     * Creates new form MyToolbar
     */
    public MyToolbar() {
        initComponents();
        checkStyle.setIcon(time);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkStyle = new javax.swing.JToggleButton();
        timeDuration = new javax.swing.JComboBox();

        checkStyle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/time.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(checkStyle, org.openide.util.NbBundle.getMessage(MyToolbar.class, "MyToolbar.checkStyle.text")); // NOI18N
        checkStyle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkStyleActionPerformed(evt);
            }
        });

        timeDuration.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10分钟", "30分钟", "60分钟", "4小时" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(checkStyle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(checkStyle)
                .addComponent(timeDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    ChecckBomFailureImpl cbi = new ChecckBomFailureImpl(3);

    private void checkStyleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkStyleActionPerformed
        try {

            cbi.threadFlag = true;
            Thread p = new Thread(cbi);
//            p.interrupt();
////            if (p.isAlive() || !p.interrupted()) {
////            p.interrupted();}
            checkBomError(p);
        } catch (ClassNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_checkStyleActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton checkStyle;
    private javax.swing.JComboBox timeDuration;
    // End of variables declaration//GEN-END:variables
    private Icon icstart = new ImageIcon(getClass().getResource("/ICON/accept.png"));
    private Icon icstop = new ImageIcon(getClass().getResource("/ICON/cross.png"));
    private Icon time = new ImageIcon(getClass().getResource("/ICON/time.png"));

    private void checkBomError(Thread p) throws ClassNotFoundException, SQLException {
        // TODO add your handling code here:


        if (!checkStyle.isSelected()) {
            checkStyle.setIcon(icstop);
            checkStyle.setText("停止检查BOM异常");
            NotificationDisplayer.getDefault().notify("", icstart, "正在检查BOM异常中...", null, NotificationDisplayer.Priority.HIGH);
//            if (!p.isAlive() || p.interrupted()) {
            cbi.threadFlag = false;
            p.start();
//            }

        } else {
            checkStyle.setIcon(icstart);
            checkStyle.setText("检查BOM异常");
            NotificationDisplayer.getDefault().notify("", icstop, "停止检查BOM异常中...", null, NotificationDisplayer.Priority.HIGH);
            p.interrupt();
            cbi.threadFlag = true;

        }
    }
}
