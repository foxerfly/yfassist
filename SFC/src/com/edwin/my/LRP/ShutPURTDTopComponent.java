/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.edwin.my.LRP;

import SqlInterface.QueryErp;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.edwin.my.LRP//ShutPURTD//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ShutPURTDTopComponent",
        iconBase = "ICONS/blockdevice.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.edwin.my.LRP.ShutPURTDTopComponent")
@ActionReferences({
    @ActionReference(path = "Menu/Window", position = 333), //    @ActionReference(path = "Toolbars/File", position = 3434)
})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ShutPURTDAction",
        preferredID = "ShutPURTDTopComponent")
@Messages({
    "CTL_ShutPURTDAction=ShutPURTD",
    "CTL_ShutPURTDTopComponent=ShutPURTD Window",
    "HINT_ShutPURTDTopComponent=This is a ShutPURTD window"
})
public final class ShutPURTDTopComponent extends TopComponent {

    public ShutPURTDTopComponent() {
        initComponents();
        setName(Bundle.CTL_ShutPURTDTopComponent());
        setToolTipText(Bundle.HINT_ShutPURTDTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmMain = new javax.swing.JPopupMenu();
        miQuery = new javax.swing.JMenuItem();
        miShut = new javax.swing.JMenuItem();
        miOpen = new javax.swing.JMenuItem();
        miQuerySpec = new javax.swing.JMenuItem();
        miClear = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMain = new javax.swing.JTable();

        pmMain.add(miQuery);
        pmMain.add(miShut);
        pmMain.add(miOpen);
        pmMain.add(miQuerySpec);
        pmMain.add(miClear);

        org.openide.awt.Mnemonics.setLocalizedText(miQuery, org.openide.util.NbBundle.getMessage(ShutPURTDTopComponent.class, "ShutPURTDTopComponent.miQuery.text")); // NOI18N
        miQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miQueryActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(miShut, org.openide.util.NbBundle.getMessage(ShutPURTDTopComponent.class, "ShutPURTDTopComponent.miShut.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(miOpen, org.openide.util.NbBundle.getMessage(ShutPURTDTopComponent.class, "ShutPURTDTopComponent.miOpen.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(miQuerySpec, org.openide.util.NbBundle.getMessage(ShutPURTDTopComponent.class, "ShutPURTDTopComponent.miQuerySpec.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(miClear, org.openide.util.NbBundle.getMessage(ShutPURTDTopComponent.class, "ShutPURTDTopComponent.miClear.text")); // NOI18N

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        tbMain.setAutoCreateRowSorter(true);
        tbMain.setModel(new javax.swing.table.DefaultTableModel(
            setRowData(),
            getColumnName()
        ));
        tbMain.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tbMain.setCellSelectionEnabled(true);
        tbMain.setRowHeight(24);
        tbMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private Vector getColumnName() {

        String[] ss = {"单别", "单号", "序号", "采购数量", "已交数量", "是否结束", "品号", "品名",
            "规格", "快捷码", "单位", "是否待检", "可用库存", "库存量", "安全存量", "预计生产", "预计请购", "预计销售", "预计领用", "预计进货", "计划销售",
            "计划领用", "计划生产", "计划采购", "预计可用"};
        ArrayList<String> list = new ArrayList<String>(Arrays.asList(ss));
        Vector vc = new Vector(list);
        return vc;
    }

    private Vector setRowData() {

        Vector vc = null;
        return vc;
    }

    private void tbMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMainMouseClicked
        // TODO add your handling code here:

        if (evt.getButton() == MouseEvent.BUTTON3) {
            pmMain.show(tbMain, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tbMainMouseClicked

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            pmMain.show(tbMain, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void miQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miQueryActionPerformed
        // TODO add your handling code here:
//       JOptionPane.showConfirmDialog(this,
//"", "选择查询条件", JOptionPane.YES_NO_OPTION);

        d = new DialogDescriptor(es, "选择文件...", true, acQuery);
        d.setClosingOptions(new Object[]{});
        d.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals(DialogDescriptor.PROP_VALUE) && evt.getNewValue() == DialogDescriptor.CLOSED_OPTION) {
                    d.setClosingOptions(null);
                }
            }
        });
        DialogDisplayer.getDefault().notifyLater(d);

    }//GEN-LAST:event_miQueryActionPerformed

    private void addtbMianROW(ArrayList<String> MM) throws ClassNotFoundException, SQLException {

        ResultSet rs = null;
        rs = getPURTDetail(MM);
        int columnLength = getColumnName().size();
        int i = 0;
        int j = 1;

        while (rs.next()) {
            int length = 0;
            int jj = 1;
            ((DefaultTableModel) tbMain.getModel()).addRow(setRowData());
            int rowc = tbMain.getRowCount() - 1;
            for (; length < columnLength; length++) {
                tbMain.setValueAt(rs.getString(jj), rowc, length);
                jj++;
            }

        }

    }

    public ResultSet getPURTDetail(ArrayList<String> MM) throws ClassNotFoundException, SQLException {
        ResultSet rs = null;
        String sql = "{CALL procPURTDLrp(?,?,?)}";
        QueryErp qr = Lookup.getDefault().lookup(QueryErp.class);
        rs = qr.rsErpProc(sql, MM);
        return rs;
    }

    private ActionListener acQuery = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == DialogDescriptor.OK_OPTION) {
                ((DefaultTableModel) tbMain.getModel()).setRowCount(0);
                ArrayList<String> al = new ArrayList<String>();
                ArrayList<ArrayList<String>> all = new ArrayList<ArrayList<String>>();
                all = es.getSelectedPURTD();
//                System.out.println(all);
                if (!all.isEmpty()) {

                    for (ArrayList<String> MM : all) {
                        try {
                            addtbMianROW(MM);
                        } catch (ClassNotFoundException ex) {
                            Exceptions.printStackTrace(ex);
                        } catch (SQLException ex) {
                            Exceptions.printStackTrace(ex);
                        }
                    }
                }
                d.setClosingOptions(null);
            } else {
                d.setClosingOptions(null);
            }
        }
    };

    private ExcelInStream es = new ExcelInStream();
    private DialogDescriptor d = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem miClear;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miQuery;
    private javax.swing.JMenuItem miQuerySpec;
    private javax.swing.JMenuItem miShut;
    private javax.swing.JPopupMenu pmMain;
    private javax.swing.JTable tbMain;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
